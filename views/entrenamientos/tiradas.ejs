<div class="container mt-4 mb-5">
  <div class="row">
    <div class="col-12 mb-4">
      <div class="d-flex justify-content-between align-items-center flex-wrap">
        <h1 class="h2">
          <i class="fas fa-bullseye me-2"></i> Registrar Tiradas
        </h1>
        <span class="badge bg-primary fs-6 px-3 py-2"><%= entrenamiento.nombre %></span>
      </div>
      <hr>
      
      <!-- Se eliminaron los bloques de alertas de éxito y error -->
      
    </div>
    
    <!-- Información del entrenamiento -->
    <div class="col-md-4 mb-4">
      <div class="card shadow mb-4">
        <div class="card-header bg-primary text-white">
          <h3 class="h5 mb-0"><i class="fas fa-info-circle me-2"></i> Información</h3>
        </div>
        <div class="card-body">
          <ul class="list-group list-group-flush">
            <li class="list-group-item d-flex justify-content-between">
              <span><i class="fas fa-calendar-alt me-2"></i> Fecha:</span>
              <strong><%= formatearFecha(entrenamiento.fecha) %></strong>
            </li>
            <li class="list-group-item d-flex justify-content-between">
              <span><i class="fas fa-ruler-horizontal me-2"></i> Distancia:</span>
              <strong><%= entrenamiento.distancia %></strong>
            </li>
            <li class="list-group-item d-flex justify-content-between">
              <span><i class="fas fa-redo me-2"></i> Rondas completadas:</span>
              <strong class="<%= entrenamiento.tiradas.length === entrenamiento.rondas ? 'text-success' : '' %>">
                <%= entrenamiento.tiradas.length %> / <%= entrenamiento.rondas %>
              </strong>
            </li>
            <li class="list-group-item d-flex justify-content-between">
              <span><i class="fas fa-bullseye me-2"></i> Flechas por ronda:</span>
              <strong><%= entrenamiento.flechasPorTirada %></strong>
            </li>
          </ul>
          
          <% if (entrenamiento.tiradas.length > 0) { %>
            <div class="mt-3">
              <h5>Progreso</h5>
              <div class="progress mb-2" style="height: 20px;">
                <div class="progress-bar bg-success" 
                     role="progressbar" 
                     style="width: <%= (entrenamiento.tiradas.length / entrenamiento.rondas) * 100 %>%;" 
                     aria-valuenow="<%= (entrenamiento.tiradas.length / entrenamiento.rondas) * 100 %>" 
                     aria-valuemin="0" 
                     aria-valuemax="100">
                  <%= Math.round((entrenamiento.tiradas.length / entrenamiento.rondas) * 100) %>%
                </div>
              </div>
              <p class="text-center small text-muted">
                <%= entrenamiento.tiradas.length %> de <%= entrenamiento.rondas %> rondas completadas
              </p>
            </div>
          <% } %>
          
          <div class="d-grid gap-2 mt-3">
            <a href="/entrenamientos/<%= entrenamiento._id %>" class="btn btn-outline-primary">
              <i class="fas fa-info-circle me-2"></i> Ver Detalles
            </a>
            <% if (entrenamiento.tiradas.length > 0 && entrenamiento.tiradas.length === entrenamiento.rondas) { %>
              <a href="/entrenamientos/<%= entrenamiento._id %>/finalizar" class="btn btn-warning"
                 onclick="return confirm('¿Estás seguro de que deseas finalizar este entrenamiento? Una vez finalizado, no podrás registrar más tiradas.')">
                <i class="fas fa-flag-checkered me-2"></i> Finalizar Entrenamiento
              </a>
            <% } %>
          </div>
        </div>
      </div>
      
      <!-- Rondas completadas -->
      <% if (entrenamiento.tiradas.length > 0) { %>
        <div class="card shadow">
          <div class="card-header bg-success text-white">
            <h3 class="h5 mb-0"><i class="fas fa-check-circle me-2"></i> Rondas Completadas</h3>
          </div>
          <div class="card-body">
            <div class="table-responsive">
              <table class="table table-sm table-hover">
                <thead class="table-light">
                  <tr>
                    <th>Ronda</th>
                    <th>Total</th>
                    <th>Promedio</th>
                  </tr>
                </thead>
                <tbody>
                  <% entrenamiento.tiradas.sort((a, b) => a.ronda - b.ronda).forEach(tirada => { %>
                    <tr>
                      <td><%= tirada.ronda %></td>
                      <td>
                        <span class="badge bg-primary"><%= tirada.total %></span>
                      </td>
                      <td><%= (tirada.total / tirada.puntos.length).toFixed(1) %></td>
                    </tr>
                  <% }) %>
                </tbody>
              </table>
            </div>
          </div>
        </div>
      <% } %>
    </div>
    
    <!-- Formulario de registro de tirada -->
    <div class="col-md-8 mb-4">
      <div class="card shadow">
        <div class="card-header bg-primary text-white">
          <h3 class="h5 mb-0">
            <i class="fas fa-edit me-2"></i> Registrar Tirada - Ronda <%= rondaActual %>
          </h3>
        </div>
        <div class="card-body">
          <!-- Formulario único para ambas vistas -->
          <form action="/entrenamientos/<%= entrenamiento._id %>/tiradas" method="POST" id="formTirada">
            <input type="hidden" name="ronda" value="<%= rondaActual %>">
            
            <div class="alert alert-info mb-4">
              <i class="fas fa-info-circle me-2"></i> 
              Registra la puntuación de cada flecha (valores del 0 al 10).
            </div>
            
            <!-- Inputs ocultos comunes a ambas vistas -->
            <% for(let i = 0; i < entrenamiento.flechasPorTirada; i++) { %>
              <input type="hidden" name="puntos[]" id="puntos<%= i %>" value="">
            <% } %>
            
            <!-- Vista móvil - Selector de flecha -->
            <div class="d-md-none">
              <div class="d-flex justify-content-between align-items-center mb-2">
                <button type="button" class="btn btn-sm btn-secondary" id="prevFlecha">
                  <i class="fas fa-arrow-left"></i>
                </button>
                <div class="text-center">
                  <h5 class="mb-0">Flecha <span id="flechaActivaMobile">1</span> de <%= entrenamiento.flechasPorTirada %></h5>
                  <div class="mt-2">
                    <span id="puntoDisplayMobile" class="display-1 fw-bold">-</span>
                  </div>
                </div>
                <button type="button" class="btn btn-sm btn-secondary" id="nextFlecha">
                  <i class="fas fa-arrow-right"></i>
                </button>
              </div>
              
              <!-- Indicadores de flechas -->
              <div class="d-flex justify-content-center mb-3">
                <% for(let i = 0; i < entrenamiento.flechasPorTirada; i++) { %>
                  <button type="button" class="btn-flecha mx-1" data-flecha="<%= i %>">
                    <span class="badge rounded-pill bg-secondary">
                      <%= i+1 %>
                    </span>
                  </button>
                <% } %>
              </div>
              
              <!-- Botonera de puntuación móvil -->
              <div class="botonera-mobile">
                <!-- 9-10: fondo amarillo -->
                <div class="d-flex mb-2 justify-content-between">
                  <% [10, 9].forEach(valor => { %>
                    <button type="button" 
                        class="btn punto-btn-mobile btn-lg btn-warning text-dark" 
                        style="width: 48%"
                        data-valor="<%= valor %>">
                      <%= valor %>
                    </button>
                  <% }); %>
                </div>
                
                <!-- 7-8: fondo rojo -->
                <div class="d-flex mb-2 justify-content-between">
                  <% [8, 7].forEach(valor => { %>
                    <button type="button" 
                        class="btn punto-btn-mobile btn-lg btn-danger text-dark" 
                        style="width: 48%"
                        data-valor="<%= valor %>">
                      <%= valor %>
                    </button>
                  <% }); %>
                </div>
                
                <!-- 5-6: fondo celeste -->
                <div class="d-flex mb-2 justify-content-between">
                  <% [6, 5].forEach(valor => { %>
                    <button type="button" 
                        class="btn punto-btn-mobile btn-lg btn-info text-dark" 
                        style="width: 48%"
                        data-valor="<%= valor %>">
                      <%= valor %>
                    </button>
                  <% }); %>
                </div>
                
                <!-- 3-4: fondo negro -->
                <div class="d-flex mb-2 justify-content-between">
                  <% [4, 3].forEach(valor => { %>
                    <button type="button" 
                        class="btn punto-btn-mobile btn-lg btn-dark text-white" 
                        style="width: 48%"
                        data-valor="<%= valor %>">
                      <%= valor %>
                    </button>
                  <% }); %>
                </div>
                
                <!-- 0-2: fondo blanco -->
                <div class="d-flex justify-content-between">
                  <% [2, 1, 0].forEach(valor => { %>
                    <button type="button" 
                        class="btn punto-btn-mobile btn-lg btn-outline-dark" 
                        style="width: 31%"
                        data-valor="<%= valor %>">
                      <%= valor %>
                    </button>
                  <% }); %>
                </div>
              </div>

              <!-- Botón de guardar y resumen -->
              <div class="mt-4">
                <button type="submit" class="btn btn-success btn-lg w-100 py-4 mb-3 fs-5 fw-bold" id="btnGuardarMobile" disabled>
                  <i class="fas fa-save me-2"></i> Guardar Tirada
                </button>

                <div class="card">
                  <div class="card-body p-3">
                    <div class="d-flex align-items-center justify-content-between">
                      <div class="d-flex align-items-center gap-2">
                        <% for(let i = 0; i < entrenamiento.flechasPorTirada; i++) { %>
                          <div class="text-center">
                            <div class="badge bg-light text-dark border" style="min-width: 2.5rem;" id="resumenFlecha<%= i %>">-</div>
                            <div class="small text-muted" style="font-size: 0.7rem;">F<%= i+1 %></div>
                          </div>
                        <% } %>
                      </div>
                      <div class="ms-3 d-flex align-items-center">
                        <span class="text-muted me-2">Total:</span>
                        <span id="totalPuntosMobile" class="badge bg-success fs-5">0</span>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            
            <!-- Vista escritorio - Todas las flechas -->
            <div class="row mb-4 d-none d-md-flex">
              <div class="row">
                <% for(let i = 0; i < entrenamiento.flechasPorTirada; i++) { %>
                  <div class="col-md-4 col-lg-3 mb-3">
                    <div class="card border-primary h-100">
                      <div class="card-header bg-primary text-white py-2">
                        <h5 class="mb-0 small">Flecha <%= i + 1 %></h5>
                      </div>
                      <div class="card-body p-2">
                        <div class="d-flex justify-content-center mb-2">
                          <span class="fs-2 fw-bold" id="puntosDisplayDesktop<%= i %>">-</span>
                        </div>
                        
                        <div class="btn-group-vertical w-100" role="group">
                          <% [[10,9,'warning'], [8,7,'danger'], [6,5,'info'], [4,3,'dark'], [2,1,0,'light']].forEach(group => { %>
                            <div class="btn-group">
                              <% group.forEach(valor => { 
                                if (typeof valor === 'number') { %>
                                  <button type="button" 
                                          class="btn btn-sm btn-<%= group[group.length-1] %> punto-btn-desktop <%= group[group.length-1] === 'light' ? 'border' : '' %>" 
                                          data-valor="<%= valor %>" 
                                          data-index="<%= i %>">
                                    <%= valor %>
                                  </button>
                              <% }
                              }); %>
                            </div>
                          <% }); %>
                        </div>
                      </div>
                    </div>
                  </div>
                <% } %>
              </div>

              <div class="d-grid gap-2 mt-4">
                <button type="submit" class="btn btn-success btn-lg" id="btnGuardarDesktop" disabled>
                  <i class="fas fa-save me-2"></i> Guardar Tirada
                </button>
                <button type="button" class="btn btn-secondary" id="btnReiniciarDesktop">
                  <i class="fas fa-redo me-2"></i> Reiniciar Tirada
                </button>
              </div>
            </div>
          </form>
        </div>
      </div>
      
      <!-- Consejos para mejorar -->
      <div class="card shadow mt-4">
        <div class="card-header bg-info text-white">
          <h3 class="h5 mb-0"><i class="fas fa-lightbulb me-2"></i> Consejos para Mejorar</h3>
        </div>
        <div class="card-body">
          <div id="consejos-carousel" class="carousel slide" data-bs-ride="carousel">
            <div class="carousel-inner">
              <div class="carousel-item active">
                <div class="p-3">
                  <h5>Mantén una postura estable</h5>
                  <p>Una postura correcta es fundamental para la consistencia. Mantén los pies separados a la altura de los hombros y el cuerpo perpendicular a la línea de tiro.</p>
                </div>
              </div>
              <div class="carousel-item">
                <div class="p-3">
                  <h5>Respira conscientemente</h5>
                  <p>Controla tu respiración: inhala al levantar el arco, contén parcialmente al apuntar y exhala suavemente después de soltar.</p>
                </div>
              </div>
              <div class="carousel-item">
                <div class="p-3">
                  <h5>Mantén el enfoque</h5>
                  <p>Concéntrate en apuntar al centro de la diana, no en la puntuación. Visualiza la flecha llegando exactamente donde quieres.</p>
                </div>
              </div>
              <div class="carousel-item">
                <div class="p-3">
                  <h5>Suelta limpio</h5>
                  <p>La suelta debe ser suave y natural. Relaja los dedos sin mover el resto del cuerpo manteniendo la posición hasta que la flecha impacte.</p>
                </div>
              </div>
            </div>
            <button class="carousel-control-prev" type="button" data-bs-target="#consejos-carousel" data-bs-slide="prev">
              <span class="carousel-control-prev-icon" aria-hidden="true"></span>
              <span class="visually-hidden">Anterior</span>
            </button>
            <button class="carousel-control-next" type="button" data-bs-target="#consejos-carousel" data-bs-slide="next">
              <span class="carousel-control-next-icon" aria-hidden="true"></span>
              <span class="visually-hidden">Siguiente</span>
            </button>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Botones de navegación -->
    <div class="col-12 d-flex justify-content-between">
      <a href="/entrenamientos" class="btn btn-outline-secondary">
        <i class="fas fa-arrow-left me-2"></i> Volver a Mis Entrenamientos
      </a>
    </div>
  </div>
</div>

<div class="d-sm-none">
  <a href="/dashboard" class="btn btn-primary mobile-float-btn">
    <i class="fas fa-home"></i>
  </a>
</div>

<!-- Estilos para la interfaz móvil -->
<style>
  @media (max-width: 767.98px) {
    /* Ajustes generales para móvil */
    body {
      overflow-x: hidden;
    }
    
    .container {
      padding-left: 0;
      padding-right: 0;
      max-width: 100%;
    }
    
    .row {
      margin-left: 0;
      margin-right: 0;
    }
    
    .col-12 {
      padding-left: 0;
      padding-right: 0;
    }
    
    /* Estilo para el selector de flechas */
    #prevFlecha, #nextFlecha {
      width: 3rem;
      height: 3rem;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    
    #puntoDisplayMobile {
      font-size: 5rem;
      line-height: 1;
      margin: 1.5rem 0;
    }
    
    /* Indicadores de flecha */
    .btn-flecha {
      border: none;
      background: none;
      padding: 0;
      cursor: pointer;
    }
    
    .btn-flecha .badge {
      width: 2.5rem;
      height: 2.5rem;
      line-height: 2.2rem;
      font-size: 1.1rem;
      transition: all 0.2s ease;
    }
    
    .btn-flecha .badge.active {
      transform: scale(1.1);
      box-shadow: 0 2px 4px rgba(0,0,0,0.2);
    }
    
    .btn-flecha .badge.completed {
      background-color: var(--bs-success) !important;
    }
    
    .btn-flecha .badge.current {
      background-color: var(--bs-primary) !important;
    }
    
    /* Botonera de puntuación */
    .botonera-mobile {
      background: #fff;
      padding: 1rem;
      border-radius: 0.5rem;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      margin-bottom: 1rem;
    }
    
    .punto-btn-mobile {
      height: 3.5rem;
      font-size: 1.3rem;
      font-weight: bold;
      border-radius: 0.5rem;
      transition: all 0.15s ease;
    }
    
    .punto-btn-mobile:active {
      transform: scale(0.95);
    }
    
    /* Resumen de puntuación */
    #resumenFlechas {
      display: flex;
      flex-wrap: nowrap;
      overflow-x: auto;
      padding: 0.5rem;
      margin: 0 -0.5rem;
      -webkit-overflow-scrolling: touch;
    }
    
    /* Animaciones */
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(10px); }
      to { opacity: 1; transform: translateY(0); }
    }
    
    .botonera-mobile {
      animation: fadeIn 0.3s ease;
    }
  }
</style>

<!-- Script para gestionar la interfaz de registro
document.addEventListener('DOMContentLoaded', function() {
  // Referencias a elementos DOM
  const puntoBtns = document.querySelectorAll('.punto-btn');
  const puntoBtnsMobile = document.querySelectorAll('.punto-btn-mobile');
  const flechaIndicators = document.querySelectorAll('.flecha-indicator');
  const btnGuardar = document.getElementById('btnGuardar');
  const btnGuardarMobile = document.getElementById('btnGuardarMobile');
  const btnReiniciar = document.getElementById('btnReiniciar');
  const prevFlecha = document.getElementById('prevFlecha');
  const nextFlecha = document.getElementById('nextFlecha');
  const puntoDisplayMobile = document.getElementById('puntoDisplayMobile');
  const flechaActivaMobile = document.getElementById('flechaActivaMobile');
  const totalPuntos = document.getElementById('totalPuntos');
  const resumenFlechas = [];
  
  // Inicializar array de resumen
  for(let i = 0; i < <%= entrenamiento.flechasPorTirada %>; i++) {
    resumenFlechas.push(document.getElementById(`resumenFlecha${i}`));
  }
  
  // Variable para seguimiento de la flecha actual en móvil
  let flechaActivaIdx = 0;
  const valoresFlechas = new Array(<%= entrenamiento.flechasPorTirada %>).fill(null);
  
  // Función para actualizar la navegación de flechas en móvil
  function actualizarNavegacionFlechas() {
    // Actualizar texto de flecha actual
    flechaActivaMobile.textContent = flechaActivaIdx + 1;
    
    // Actualizar estado de botones de navegación
    prevFlecha.disabled = flechaActivaIdx === 0;
    nextFlecha.disabled = flechaActivaIdx === <%= entrenamiento.flechasPorTirada - 1 %>;
    
    // Actualizar indicadores de flecha
    flechaIndicators.forEach((indicator, idx) => {
      const badge = indicator.querySelector('.badge');
      if (idx === flechaActivaIdx) {
        badge.classList.remove('bg-secondary');
        badge.classList.add('bg-primary');
      } else {
        if (valoresFlechas[idx] !== null) {
          badge.classList.remove('bg-secondary', 'bg-primary');
          badge.classList.add('bg-success');
        } else {
          badge.classList.remove('bg-primary', 'bg-success');
          badge.classList.add('bg-secondary');
        }
      }
    });
    
    // Mostrar el valor actual si existe
    const valorActual = valoresFlechas[flechaActivaIdx];
    if (valorActual !== null) {
      puntoDisplayMobile.textContent = valorActual;
      
      // Establecer el color según el valor
      puntoDisplayMobile.className = 'display-1 fw-bold';
      if (valorActual <= 2) {
        puntoDisplayMobile.classList.add('text-dark');
      } else if (valorActual <= 4) {
        puntoDisplayMobile.classList.add('text-dark');
      } else if (valorActual <= 6) {
        puntoDisplayMobile.classList.add('text-info');
      } else if (valorActual <= 8) {
        puntoDisplayMobile.classList.add('text-danger');
      } else {
        puntoDisplayMobile.classList.add('text-warning');
      }
    } else {
      puntoDisplayMobile.textContent = '-';
      puntoDisplayMobile.className = 'display-1 fw-bold';
    }
  }
  
  // Manejar navegación entre flechas
  prevFlecha.addEventListener('click', function() {
    if (flechaActivaIdx > 0) {
      flechaActivaIdx--;
      actualizarNavegacionFlechas();
    }
  });
  
  nextFlecha.addEventListener('click', function() {
    if (flechaActivaIdx < <%= entrenamiento.flechasPorTirada - 1 %>) {
      flechaActivaIdx++;
      actualizarNavegacionFlechas();
    }
  });
  
  // Manejar clic en indicadores de flecha
  flechaIndicators.forEach((indicator, idx) => {
    indicator.addEventListener('click', function() {
      flechaActivaIdx = idx;
      actualizarNavegacionFlechas();
    });
  });
  
  // Manejar selección de puntos en móvil
  puntoBtnsMobile.forEach(btn => {
    btn.addEventListener('click', function() {
      const valor = parseInt(this.getAttribute('data-valor'));
      
      // Actualizar el valor en el array
      valoresFlechas[flechaActivaIdx] = valor;
      
      // Actualizar visualmente
      actualizarNavegacionFlechas();
      actualizarResumenFlecha(flechaActivaIdx, valor);
      
      // Calcular el total
      calcularTotal();
      
      // Avanzar automáticamente a la siguiente flecha si no es la última
      if (flechaActivaIdx < <%= entrenamiento.flechasPorTirada - 1 %>) {
        setTimeout(() => {
          flechaActivaIdx++;
          actualizarNavegacionFlechas();
        }, 300);
      }
      
      // Habilitar botón de guardar si todos los valores están completos
      const todosCompletados = valoresFlechas.every(v => v !== null);
      btnGuardarMobile.disabled = !todosCompletados;
      if (btnGuardar) btnGuardar.disabled = !todosCompletados;
    });
  });
  
  // Función para actualizar el resumen de flecha
  function actualizarResumenFlecha(idx, valor) {
    const resumen = resumenFlechas[idx];
    resumen.textContent = valor;
    
    // Establecer el color según el valor
    resumen.className = 'badge p-2';
    if (valor <= 2) {
      resumen.classList.add('bg-light', 'text-dark', 'border');
    } else if (valor <= 4) {
      resumen.classList.add('bg-dark', 'text-white');
    } else if (valor <= 6) {
      resumen.classList.add('bg-info', 'text-dark');
    } else if (valor <= 8) {
      resumen.classList.add('bg-danger', 'text-dark');
    } else {
      resumen.classList.add('bg-warning', 'text-dark');
    }
  }
  
  // Calcular el total de la puntuación
  function calcularTotal() {
    const total = valoresFlechas.reduce((sum, val) => sum + (val || 0), 0);
    totalPuntos.textContent = total;
  }
  
  // Inicializar la interfaz
  actualizarNavegacionFlechas();
  
  // Manejar reinicio de tirada
  if (btnReiniciar) {
    btnReiniciar.addEventListener('click', function() {
      valoresFlechas.fill(null);
      flechaActivaIdx = 0;
      actualizarNavegacionFlechas();
      resumenFlechas.forEach(resumen => {
        resumen.textContent = '-';
        resumen.className = 'badge bg-light text-dark border';
      });
      calcularTotal();
      btnGuardarMobile.disabled = true;
      if (btnGuardar) btnGuardar.disabled = true;
    });
  }
}); -->

<!-- Script para botonera de puntos -->
<script>
document.addEventListener('DOMContentLoaded', function() {
  const formTirada = document.getElementById('formTirada');
  const btnGuardarMobile = document.getElementById('btnGuardarMobile');
  const btnGuardarDesktop = document.getElementById('btnGuardarDesktop');
  const prevFlecha = document.getElementById('prevFlecha');
  const nextFlecha = document.getElementById('nextFlecha');
  const puntoDisplayMobile = document.getElementById('puntoDisplayMobile');
  const flechaActivaMobile = document.getElementById('flechaActivaMobile');
  const totalPuntosMobile = document.getElementById('totalPuntosMobile');
  const btnsFlechas = document.querySelectorAll('.btn-flecha');
  const resumenFlechas = [];
  
  let flechaActivaIdx = 0;
  const valoresFlechas = new Array(<%= entrenamiento.flechasPorTirada %>).fill(null);
  
  // Inicializar resumen
  for(let i = 0; i < <%= entrenamiento.flechasPorTirada %>; i++) {
    resumenFlechas.push(document.getElementById(`resumenFlecha${i}`));
  }
  
  function actualizarResumen(idx, valor) {
    // Actualizar badge de resumen
    const badge = resumenFlechas[idx];
    if (badge) {
      badge.textContent = valor !== null ? valor : '-';
      badge.className = 'badge';
      if (valor !== null) {
        if (valor >= 9) badge.classList.add('bg-warning', 'text-dark');
        else if (valor >= 7) badge.classList.add('bg-danger', 'text-dark');
        else if (valor >= 5) badge.classList.add('bg-info', 'text-dark');
        else if (valor >= 3) badge.classList.add('bg-dark', 'text-white');
        else badge.classList.add('bg-light', 'text-dark', 'border');
      } else {
        badge.classList.add('bg-light', 'text-dark', 'border');
      }
    }
    
    // Actualizar input hidden común
    const input = document.getElementById(`puntos${idx}`);
    if (input) {
      input.value = valor !== null ? valor.toString() : '';
    }
  }
  
  function actualizarTotal() {
    const total = valoresFlechas.reduce((sum, val) => sum + (val || 0), 0);
    if (totalPuntosMobile) {
      totalPuntosMobile.textContent = total;
    }
  }
  
  function actualizarNavegacion() {
    // Actualizar número de flecha activa
    if (flechaActivaMobile) {
      flechaActivaMobile.textContent = flechaActivaIdx + 1;
    }
    
    // Actualizar botones de navegación
    if (prevFlecha) prevFlecha.disabled = flechaActivaIdx === 0;
    if (nextFlecha) nextFlecha.disabled = flechaActivaIdx === <%= entrenamiento.flechasPorTirada - 1 %>;
    
    // Actualizar indicadores de flecha
    btnsFlechas.forEach((btn, idx) => {
      const badge = btn.querySelector('.badge');
      if (badge) {
        badge.className = 'badge rounded-pill';
        if (idx === flechaActivaIdx) {
          badge.classList.add('bg-primary');
        } else if (valoresFlechas[idx] !== null) {
          badge.classList.add('bg-success');
        } else {
          badge.classList.add('bg-secondary');
        }
      }
    });
    
    // Actualizar display de valor
    if (puntoDisplayMobile) {
      const valorActual = valoresFlechas[flechaActivaIdx];
      puntoDisplayMobile.textContent = valorActual !== null ? valorActual : '-';
      puntoDisplayMobile.className = 'display-1 fw-bold';
      if (valorActual !== null) {
        if (valorActual >= 9) puntoDisplayMobile.classList.add('text-warning');
        else if (valorActual >= 7) puntoDisplayMobile.classList.add('text-danger');
        else if (valorActual >= 5) puntoDisplayMobile.classList.add('text-info');
        else if (valorActual >= 3) puntoDisplayMobile.classList.add('text-dark');
        else puntoDisplayMobile.classList.add('text-secondary');
      }
    }
  }
  
  function actualizarBotonesGuardar() {
    const todosCompletados = valoresFlechas.every(v => v !== null);
    if (btnGuardarMobile) btnGuardarMobile.disabled = !todosCompletados;
    if (btnGuardarDesktop) btnGuardarDesktop.disabled = !todosCompletados;
  }
  
  // Manejar clicks en botones de puntuación móvil
  document.querySelectorAll('.punto-btn-mobile').forEach(btn => {
    btn.addEventListener('click', function() {
      const valor = parseInt(this.dataset.valor);
      
      // Actualizar valor
      valoresFlechas[flechaActivaIdx] = valor;
      
      // Actualizar visualización
      actualizarResumen(flechaActivaIdx, valor);
      actualizarTotal();
      actualizarNavegacion();
      actualizarBotonesGuardar();
      
      // Avanzar a la siguiente flecha
      if (flechaActivaIdx < <%= entrenamiento.flechasPorTirada - 1 %>) {
        setTimeout(() => {
          flechaActivaIdx++;
          actualizarNavegacion();
        }, 300);
      }
    });
  });
  
  // Manejar clicks en botones de puntuación desktop
  document.querySelectorAll('.punto-btn-desktop').forEach(btn => {
    btn.addEventListener('click', function() {
      const valor = parseInt(this.dataset.valor);
      const idx = parseInt(this.dataset.index);
      
      // Actualizar valor
      valoresFlechas[idx] = valor;
      
      // Actualizar visualización
      actualizarResumen(idx, valor);
      actualizarTotal();
      actualizarBotonesGuardar();
      
      // Actualizar display desktop
      const display = document.getElementById(`puntosDisplayDesktop${idx}`);
      if (display) {
        display.textContent = valor;
        display.className = 'fs-2 fw-bold';
        if (valor >= 9) display.classList.add('text-warning');
        else if (valor >= 7) display.classList.add('text-danger');
        else if (valor >= 5) display.classList.add('text-info');
        else if (valor >= 3) display.classList.add('text-dark');
        else display.classList.add('text-secondary');
      }
    });
  });
  
  // Manejar navegación entre flechas
  if (prevFlecha) {
    prevFlecha.addEventListener('click', () => {
      if (flechaActivaIdx > 0) {
        flechaActivaIdx--;
        actualizarNavegacion();
      }
    });
  }
  
  if (nextFlecha) {
    nextFlecha.addEventListener('click', () => {
      if (flechaActivaIdx < <%= entrenamiento.flechasPorTirada - 1 %>) {
        flechaActivaIdx++;
        actualizarNavegacion();
      }
    });
  }
  
  // Manejar clicks en indicadores de flecha
  btnsFlechas.forEach((btn, idx) => {
    btn.addEventListener('click', () => {
      flechaActivaIdx = idx;
      actualizarNavegacion();
    });
  });
  
  // Manejar envío del formulario
  if (formTirada) {
    formTirada.addEventListener('submit', function(e) {
      e.preventDefault();
      
      // Verificar que todos los valores estén completos
      if (!valoresFlechas.every(v => v !== null)) {
        alert('Por favor, registra los puntos de todas las flechas antes de guardar.');
        return;
      }
      
      // Asegurarse de que todos los inputs tengan valores
      valoresFlechas.forEach((valor, idx) => {
        const input = document.getElementById(`puntos${idx}`);
        if (input) {
          input.value = valor.toString();
        }
      });
      
      // Enviar el formulario
      this.submit();
    });
  }
  
  // Manejar reinicio de tirada
  const btnReiniciarDesktop = document.getElementById('btnReiniciarDesktop');
  if (btnReiniciarDesktop) {
    btnReiniciarDesktop.addEventListener('click', function() {
      valoresFlechas.fill(null);
      flechaActivaIdx = 0;
      
      // Reiniciar todos los displays y valores
      for(let i = 0; i < <%= entrenamiento.flechasPorTirada %>; i++) {
        actualizarResumen(i, null);
        const displayDesktop = document.getElementById(`puntosDisplayDesktop${i}`);
        if (displayDesktop) {
          displayDesktop.textContent = '-';
          displayDesktop.className = 'fs-2 fw-bold';
        }
      }
      
      actualizarTotal();
      actualizarNavegacion();
      actualizarBotonesGuardar();
    });
  }
  
  // Inicializar interfaz
  actualizarNavegacion();
  actualizarBotonesGuardar();
});
</script> 